---
import SectionContainer from "../components/SectionContainer.astro";
import PageTitle from "../components/PageTitle.astro";
import RootLayout from "./RootLayout.astro";
import { type CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import ScrollTopAndComments from "@/solid/ScrollTopAndComments.tsx";

import Hero from "@/components/Hero.astro"
import Collapsible from "@/components/Collapsible.astro";
import StepFlow from "@/components/StepFlow.astro";
import PostImage from "@/components/PostImage.astro";

export const components = { Hero, Collapsible, StepFlow, PostImage }

interface Props {
    post: CollectionEntry<"blog">;
}

const { post } = Astro.props;

const { Content, headings, remarkPluginFrontmatter } = await post.render();

const frontmatter = remarkPluginFrontmatter as {
	minutesRead: string;
	wordCount: number;
};
---
<RootLayout title={post.data.title} description={post.data.summary} hero={post.data.hero}>
    <SectionContainer>
        <ScrollTopAndComments client:only="solid-js" />
        <article>
            <div class="xl:divide-y xl:divide-gray-200 xl:dark:divide-gray-700">
                <header class="pt-6 xl:pb-6">
                    <div class="flex flex-col gap-4 space-y-1 text-center">
                        <dl class="space-y-10">
                            <div>
                                <dt class="sr-only">Published on</dt>
                                <dd
                                    class="text-base font-medium leading-6 text-gray-500 dark:text-gray-400"
                                >
                                    <FormattedDate date={post.data.date} {frontmatter} />
                                </dd>
                            </div>
                        </dl>
                        <div>
                            <PageTitle>{post.data.title}</PageTitle>
                        </div>
                    </div>
                </header>
                <div class="divide-y divide-gray-200 pb-8 dark:divide-gray-700">
                    <div
                        class="xl:row-span-2 xl:pb-0"
                    >
                        {
                            post.data.draft && (
                                <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4 mt-10 rounded-md">
                                    <p class="leading-5 text-yellow-700">
                                        This is a draft. It might be incomplete
                                        or have errors.
                                    </p>
                                </div>
                            )
                        }
                        <div
                            id="content"
                            class="prose max-w-none pb-8 dark:prose-invert"
                        >
                            <slot />
                            {post.data.hero?.src && post.data.hero?.alt && <Hero src={post.data.hero.src} alt={post.data.hero.alt} />}
                            <Content components={{ ...components }} {headings} />
                        </div>
                    </div>
                </div>
            </div>
        </article>
    </SectionContainer>
</RootLayout>

<script src="/src/scripts/copyCode.ts"></script>

<script is:inline>
    function addIntersectionObserver() {
        const observer = new IntersectionObserver((sections) => {
            sections.forEach((section) => {
                const heading = section.target.querySelector("h2");
                if (!heading) return;
                const id = heading.getAttribute("id");

                // Get the link to this section's heading
                const link = document.querySelector(`nav ul li#${id}`);
                if (!link) return;

                // Add/remove the .active class based on whether the
                // section is visible
                const addRemove =
                    section.isIntersecting ? "add" : "remove";
                link.classList[addRemove]("border-black", "dark:font-extrabold", "dark:text-gray-50");
            });
        });

        document.querySelectorAll("section.heading").forEach((section) => {
            observer.observe(section);
        });
    }

    console.log("Adding interesction observer...");
    addIntersectionObserver();
</script>
